<?php namespace App\Http\Controllers;

use App;
use Config;
use Event;
use Input;
use Redirect;
use Riari\Forum\Events\ThreadWasViewed;
use Riari\Forum\Repositories\Categories;
use Riari\Forum\Repositories\Threads;
use Riari\Forum\Repositories\Posts;
use Riari\Forum\Libraries\AccessControl;
use Riari\Forum\Libraries\Alerts;
use Riari\Forum\Libraries\Utils;
use Riari\Forum\Libraries\Validation;
use Route;
use View;
use Validator;
/* Autogenerated Forum Controller */
/* Hook point of the Forum package inside your laravel application */
/* Feel free to override methods here to fit your requirements */
class ForumController extends \Riari\Forum\Controllers\BaseController
{
	
	
	
	public function getViewCategory($categoryID, $categoryAlias)
    {
        $this->load(['category' => $categoryID], ['parentCategory', 'subCategories']);

        return $this->makeView('palavar_categories');
    }
	
	
	
	public function getThreadCreateForm($categoryID, $categoryAlias){
		
		
		 return $this->makeView('reply');
		
	}
	
	public function getViewCategoryOnlyThreads($categoryID, $categoryAlias)
    {
        $this->load(['category' => $categoryID], ['threads']);

        return $this->makeView('threads');
    }
	
	public function getCreateThread($categoryID, $categoryAlias)
    {
        $this->load(['category' => $categoryID]);

        return $this->makeView('thread');
    }
	
	 public function postCreateThread($categoryID, $categoryAlias)
    {
        $user = [];;//Utils::getCurrentUser();

		$user['id'] = 2343243278;
		
        $this->load(['category' => $categoryID]);

        $thread_valid = Validation::check('thread');
        $post_valid = Validation::check('post');
        if ($thread_valid && $post_valid)
        {
            $thread = array(
                'author_id'       => $user['id'],
                'parent_category' => $categoryID,
                'title'           => Input::get('title')
            );

            $thread = $this->threads->create($thread);

            $post = array(
                'parent_thread'   => $thread->id,
                'author_id'       => $user['id'],
                'content'         => Input::get('content')
            );

			$image = Input::file('image');
			
			$assetPath = '/uploads/basic';
			
            $uploadPath = public_path($assetPath);
			
			//var_dump($image->move($uploadPath, $image->getClientOriginalName())); exit;
			$name = $assetPath . '/' . $image->getClientOriginalName();
			
			$post['image'] = $name;

            $post = $this->posts->create($post);

            $post->thread->touch();

            Alerts::add('success', trans('forum::base.reply_added'));

			
            //$this->posts->create($post);

            //Alerts::add('success', trans('forum::base.thread_created'));

            //return Redirect::to($thread->route);
			
			return "success";
        }
        else
        {
            //return Redirect::to($this->collections['category']->newThreadRoute)->withInput();
			return "failure";
        }
    }
	
	
	
	public function getViewThread($categoryID, $categoryAlias, $threadID, $threadAlias)
    {
        $this->load(['category' => $categoryID, 'thread' => $threadID]);

        Event::fire(new ThreadWasViewed($this->collections['thread']));

        return $this->makeView('threaddetails');
    }

     public function postReplyToThread($categoryID, $categoryAlias, $threadID, $threadAlias)
    {
        $user = Utils::getCurrentUser();

        $this->load(['category' => $categoryID, 'thread' => $threadID]);

        if (!$this->collections['thread']->canReply)
        {
            //return Redirect::to($this->collections['thread']->route);
        }

        $post_valid = Validation::check('post');
        if ($post_valid)
        {
            $post = array(
                'parent_thread' => $threadID,
                'author_id'     => 1,//$user->id
                'content'       => Input::get('content')
            );
			
			$image = Input::file('image');
			
			$assetPath = '/uploads/basic';
            $uploadPath = public_path($assetPath);
			
			//var_dump($image->move($uploadPath, $image->getClientOriginalName())); exit;
			$name = $assetPath . '/' . $image->getClientOriginalName();
			$post['image'] = $name;

            $post = $this->posts->create($post);

            $post->thread->touch();

            Alerts::add('success', trans('forum::base.reply_added'));

           // return Redirect::to($this->collections['thread']->lastPostRoute);
        }
        else
        {
           // return Redirect::to($this->collections['thread']->replyRoute)->withInput();
        }
    }
}
